<?php

namespace modava\charts;

use yii\base\InvalidCallException;
use yii\base\Widget;

class LineChart extends Widget
{
    /*
     * id là duy nhất
     * render chart
     */
    public $id = 'line-chart';

    /*
     * col này nằm trong class row
     * hiển thị độ dài của chart
     */
    public $col = 'col-sm';

    /*
     * Chiều cao của chart
     */
    public $height = '294px';

    /*
     * Link get dữ liệu hiển thị ra chart
     */
    public $linkgetdata = '';

    /*
     * Dữ liệu hiển thị trên thanh Y của chart
     * Không được để trống
     * Hiển thị 1 vị trí
     */
    public $xkey = '';

    /*
     * Dữ liệu hiển thị trên thanh X của chart
     * Không được để trống
     * Có thể nhiều chart được hiển thị
     */
    public $ykeys = '';

    /*
     * Tên hiển thị trên thành X của các chart tương ứng
     * tương ứng với các ykeys
     */
    public $labelY = '';

    /*
     * Kích thước point tại mỗi vị trí
     */
    public $pointSize = 3;

    /*
     * Chiều dày của đường nối
     */
    public $lineWidth = 2;

    /*
     * màu của point
     */
    public $pointFillColors = '#fff';
    public $pointStrokeColors = '#22af47';

    /*
     * Màu dóng hàng từ Y qua
     */
    public $gridLineColor = '#eaecec';


    /*
     * Màu nối các point
     */
    public $lineColors = '#22af47';

    /*
     * Màu và font chữ hàng Y và X
     */
    public $gridTextColor = '#5e7d8a';
    public $gridTextFamily = 'Inherit';

    /*
     * Multiple line chart
     * Giữa multi và simple không khác nhau nhiều, chỉ là do dữ liệu truyền vào
     */
    public $multi = false;

    /*
     * throwExceptionOnError null
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if ($this->xkey == '') {
            throw new InvalidCallException('Không tồn tại tên vị trí hàng Y trên biểu đồ');
        }
        if ($this->ykeys == '') {
            throw new InvalidCallException('Không tồn tại tên vị trí hàng Y trên biểu đồ');
        }

        if ($this->labelY == '') {
            $this->labelY = $this->ykeys;
        }

        //Xử lý multiple line chart
        if ($this->multi == true) {

        }
    }

    public function run()
    {
        parent::run(); // TODO: Change the autogenerated stub
        $view = $this->getView();
        LineChartAssets::register($view);

        echo $this->renderLineChart($this->id, $this->col, $this->height);

        $js = $this->renderLineChartJs(
            $this->id,
            $this->linkgetdata,
            $this->xkey,
            $this->ykeys,
            $this->labelY,
            $this->pointSize,
            $this->lineWidth,
            $this->pointFillColors,
            $this->pointStrokeColors,
            $this->gridLineColor,
            $this->lineColors,
            $this->gridTextColor,
            $this->gridTextFamily
        );
        $view->registerJs($js);
    }

    private function renderLineChart($id, $col, $height)
    {
        return '<div class="' . $col . '"><div id="' . $id . '" class="" style="height: ' . $height . '"></div></div>';
    }

    private function renderLineChartJs($id, $linkgetdata, $xkey, $ykeys, $labelY, $pointSize,
                                       $lineWidth, $pointFillColors, $pointStrokeColors, $gridLineColor, $lineColors, $gridTextColor, $gridTextFamily)
    {
        $script = <<< JS
        $.ajax({
            'Type': 'POST',
            'dataType': 'json',
            'url': '$linkgetdata',
            'beforeSend': function() {
                $('#$id').myLoading();
            }
        }).done(function(res) {
            if($('#$id').length > 0)
                Morris.Line({
                element: $id,
                data: res,
                xkey: '$xkey',
                ykeys: $ykeys,
                labels: $labelY,
                pointSize: $pointSize,
                fillOpacity: 0,
                lineWidth:$lineWidth,
                pointFillColors:['$pointFillColors'],
                pointStrokeColors:['$pointStrokeColors'],
                behaveLikeLine: true,
                hideHover: 'auto',
                gridLineColor: '$gridLineColor',
                lineColors: ['$lineColors'],
                resize: true,
                smooth:false,
                gridTextColor:'$gridTextColor',
                gridTextFamily:"$gridTextFamily"
            });
            $('#$id').myUnloading();
        });
JS;
        return $script;
    }
}